import streamlit as st
from pathlib import Path
import streamlit.components.v1 as components
from utils_AI import ai_diagnose
import os
import base64
import google.generativeai as genai

# ‚úÖ Page setup
st.set_page_config(page_title="AI-Powered Symptom Checker", layout="wide")

# ‚úÖ Check API key
gemini_key = os.getenv("GEMINI_API_KEY") or st.secrets.get("GEMINI_API_KEY")
if gemini_key:
    genai.configure(api_key=gemini_key)
    st.sidebar.success("‚úÖ API key loaded successfully.")
else:
    st.sidebar.error("‚ùå API key missing. Set it using environment variable or secrets.toml.")


BASE_DIR = Path(__file__).parent
STATIC = BASE_DIR / "static"
STYLES = BASE_DIR / "styles"

# ‚úÖ CSS
st.markdown(f"<style>{(STYLES / 'base.css').read_text()}</style>", unsafe_allow_html=True)
st.markdown("""
<style>
body {
    background: url('https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.vecteezy.com%2Ffree-vector%2Fhealthcare-background&psig=AOvVaw1Ga9I1BS8SRTD9QHllO0Uu&ust=1760512586782000&source=images&cd=vfe&opi=89978449&ved=0CBUQjRxqFwoTCODwx9OSo5ADFQAAAAAdAAAAABAV')
    no-repeat center center fixed;
    background-size: cover;
}
.blur-bg {
    backdrop-filter: blur(8px);
    background: rgba(255,255,255,0.3);
    min-height: 100vh;
    width: 100vw;
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
}
</style>
<div class="blur-bg"></div>
""", unsafe_allow_html=True)

# ‚úÖ Header
col1, col2, col3 = st.columns([1, 7, 1])
with col1:
    st.image(str(STATIC / "images/icon.png"), width=140)
with col2:
    st.markdown("<h1 style='color:#1976d2; font-size:2.7rem;text-align: center;'> WELCOME TO AI SYMPTOM CHECKER</h1>", unsafe_allow_html=True)
    st.markdown("<p style='color:#333; text-align: center;'>üí¨ Get Preliminary Health Guidance based on your Symptoms.</p>", unsafe_allow_html=True)
with col3:
    st.image(str(STATIC / "images/medical.jpg"), width=140)

# ‚úÖ Layout: slideshow (left) + input form (right)
left, right = st.columns([2, 2])

# ---------- LEFT SIDE ----------
with left:
    st.markdown("### ü©∫ Prevention is better than cure")
    image_files = ["image 1.jpg", "image 2.jpg", "image 3.jpg", "image 4.jpg", "Untitled-5.jpg", "image 6.jpg"]
    img_tags = ""
    for i, img_name in enumerate(image_files):
        img_path = STATIC / "images" / img_name
        try:
            with open(img_path, "rb") as f:
                data = f.read()
            b64 = base64.b64encode(data).decode()
            img_tags += f'<img src="data:image/jpeg;base64,{b64}" class="slide{" active" if i == 0 else ""}">\n'
        except Exception:
            continue

    html_slideshow = f"""
    <style>
    .slideshow-container {{
        position: relative;
        width: 100%;
        max-width: 450px;
        height: 400px;
        margin: auto;
        overflow: hidden;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        background: #fff;
    }}
    .slide {{
        display: none;
        width: 95%;
        height: 350px;
        object-fit: contain;
        border-radius: 2px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.12);
    }}
    .slide.active {{
        display: block;
    }}
    </style>
    <div class="slideshow-container">{img_tags}</div>
    <script>
    var slides = document.querySelectorAll('.slide');
    var current = 0;
    function showSlide(idx) {{
        slides.forEach((img, i) => img.classList.remove('active'));
        slides[idx].classList.add('active');
    }}
    setInterval(function() {{
        current = (current + 1) % slides.length;
        showSlide(current);
    }}, 2000);
    </script>
    """
    components.html(html_slideshow, height=400)

# ---------- RIGHT SIDE ----------
with right:
    st.markdown("### ü§í Enter Your Symptoms")
    if "symptom_inputs" not in st.session_state:
        st.session_state.symptom_inputs = [""]

    for i in range(len(st.session_state.symptom_inputs)):
        st.session_state.symptom_inputs[i] = st.text_input(f"Symptom {i + 1}", st.session_state.symptom_inputs[i], key=f"symptom_{i}")

    if len(st.session_state.symptom_inputs) < 4:
        if st.button("‚ûï Add Symptom"):
            st.session_state.symptom_inputs.append("")
    else:
        st.warning("‚ö†Ô∏è Maximum 4 symptoms allowed.")

    analyze_clicked = st.button("üîç Analyze Symptoms")

# ---------- AI DIAGNOSIS ----------
result_html = ""
if analyze_clicked:
    symptoms = [s.strip() for s in st.session_state.symptom_inputs if s.strip()]
    if symptoms:
        with st.spinner("ü§ñ analyzing your symptoms..."):
            ai_result = ai_diagnose(symptoms)
            if "error" in ai_result:
                st.error(ai_result["error"])
            else:
                disease = ai_result.get("disease", "Unknown")
                desc = ai_result.get("description_en", "")
                causes = ai_result.get("causes", "")
                precautions = ai_result.get("precautions", "")
                when_help = ai_result.get("when_to_seek_help", "")
                confidence = ai_result.get("confidence", 0.0)

                parts = [
                    f"<h3 style='margin-top:0;color:#1565c0;'>{disease}</h3>",
                    f"<p style='font-size:1rem;color:#333;'>{desc}</p>",
                ]
                if causes:
                    parts.append(f"<h4>üß¨ Possible Causes</h4><p>{causes}</p>")
                if precautions:
                    parts.append(f"<h4>ü©π Precautions</h4><p>{precautions}</p>")
                if when_help:
                    parts.append(f"<h4>üè• When to Seek Help</h4><p>{when_help}</p>")
                parts.append(f"<p style='color:#666;font-size:0.9rem;'>ü§ñ Confidence: {confidence:.2f}</p>")

                result_html = f"""
                <div style="width:98vw;max-width:1200px;margin:32px auto;padding:28px 24px;
                    background:#eaf6fc;border-radius:12px;box-shadow:0 2px 8px rgba(0,0,0,0.08);">
                    {''.join(parts)}
                </div>
                """
    else:
        st.warning("‚ö†Ô∏è Please enter at least one symptom before analyzing.")

if result_html:
    st.markdown(result_html, unsafe_allow_html=True)
